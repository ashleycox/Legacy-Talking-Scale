/**
  Arduino Talking Scale
  A simple scale using the HX711, a 328-based arduino and the Talkie text to speech library.
  Concept and code by Ashley Cox, with libraries the property of their respective owners and distributed in accordance with their respective licenses
  More details on this project at https://www.ashleycox.co.uk
**/

#include <EEPROMex.h>
#include <EEPROMVar.h>
#include <talkie.h>
#include "HX711.h"

//Program variables
const int LOADCELL_DOUT_PIN = 4; //HX711 digital out
const int LOADCELL_SCK_PIN = 5; //HX711 CLK
int r1; //Number before decimal
int r2; //The first decimal
int r3; //the second decimal
float cal_factor; //Scale calibration factor, set by calibration function
float reading; //Scale Measurement
const int buttonPin = 2; //Calibration button pin
int calPressed = 0; //is the button pressed
int calibrated = 1; //used for the innitial tare on power up

//Speech variables
const uint8_t spGRAMS[] PROGMEM = {};
const uint8_t spZERO[] PROGMEM = {0x69, 0xFB, 0x59, 0xDD, 0x51, 0xD5, 0xD7, 0xB5, 0x6F, 0x0A, 0x78, 0xC0, 0x52, 0x01, 0x0F, 0x50, 0xAC, 0xF6, 0xA8, 0x16, 0x15, 0xF2, 0x7B, 0xEA, 0x19, 0x47, 0xD0, 0x64, 0xEB, 0xAD, 0x76, 0xB5, 0xEB, 0xD1, 0x96, 0x24, 0x6E, 0x62, 0x6D, 0x5B, 0x1F, 0x0A, 0xA7, 0xB9, 0xC5, 0xAB, 0xFD, 0x1A, 0x62, 0xF0, 0xF0, 0xE2, 0x6C, 0x73, 0x1C, 0x73, 0x52, 0x1D, 0x19, 0x94, 0x6F, 0xCE, 0x7D, 0xED, 0x6B, 0xD9, 0x82, 0xDC, 0x48, 0xC7, 0x2E, 0x71, 0x8B, 0xBB, 0xDF, 0xFF, 0x1F};
const uint8_t spONE[] PROGMEM = {0x66, 0x4E, 0xA8, 0x7A, 0x8D, 0xED, 0xC4, 0xB5, 0xCD, 0x89, 0xD4, 0xBC, 0xA2, 0xDB, 0xD1, 0x27, 0xBE, 0x33, 0x4C, 0xD9, 0x4F, 0x9B, 0x4D, 0x57, 0x8A, 0x76, 0xBE, 0xF5, 0xA9, 0xAA, 0x2E, 0x4F, 0xD5, 0xCD, 0xB7, 0xD9, 0x43, 0x5B, 0x87, 0x13, 0x4C, 0x0D, 0xA7, 0x75, 0xAB, 0x7B, 0x3E, 0xE3, 0x19, 0x6F, 0x7F, 0xA7, 0xA7, 0xF9, 0xD0, 0x30, 0x5B, 0x1D, 0x9E, 0x9A, 0x34, 0x44, 0xBC, 0xB6, 0x7D, 0xFE, 0x1F};
const uint8_t spTWO[]  PROGMEM = {0x06, 0xB8, 0x59, 0x34, 0x00, 0x27, 0xD6, 0x38, 0x60, 0x58, 0xD3, 0x91, 0x55, 0x2D, 0xAA, 0x65, 0x9D, 0x4F, 0xD1, 0xB8, 0x39, 0x17, 0x67, 0xBF, 0xC5, 0xAE, 0x5A, 0x1D, 0xB5, 0x7A, 0x06, 0xF6, 0xA9, 0x7D, 0x9D, 0xD2, 0x6C, 0x55, 0xA5, 0x26, 0x75, 0xC9, 0x9B, 0xDF, 0xFC, 0x6E, 0x0E, 0x63, 0x3A, 0x34, 0x70, 0xAF, 0x3E, 0xFF, 0x1F};
const uint8_t spTHREE[] PROGMEM = {0x0C, 0xE8, 0x2E, 0x94, 0x01, 0x4D, 0xBA, 0x4A, 0x40, 0x03, 0x16, 0x68, 0x69, 0x36, 0x1C, 0xE9, 0xBA, 0xB8, 0xE5, 0x39, 0x70, 0x72, 0x84, 0xDB, 0x51, 0xA4, 0xA8, 0x4E, 0xA3, 0xC9, 0x77, 0xB1, 0xCA, 0xD6, 0x52, 0xA8, 0x71, 0xED, 0x2A, 0x7B, 0x4B, 0xA6, 0xE0, 0x37, 0xB7, 0x5A, 0xDD, 0x48, 0x8E, 0x94, 0xF1, 0x64, 0xCE, 0x6D, 0x19, 0x55, 0x91, 0xBC, 0x6E, 0xD7, 0xAD, 0x1E, 0xF5, 0xAA, 0x77, 0x7A, 0xC6, 0x70, 0x22, 0xCD, 0xC7, 0xF9, 0x89, 0xCF, 0xFF, 0x03};
const uint8_t spFOUR[] PROGMEM = {0x08, 0x68, 0x21, 0x0D, 0x03, 0x1C, 0x90, 0xC0, 0x88, 0x92, 0xB2, 0x29, 0x87, 0x76, 0x2B, 0x2D, 0x5C, 0x7B, 0x06, 0xD9, 0xED, 0x74, 0x64, 0x51, 0x54, 0x4D, 0xA2, 0xBA, 0x99, 0xB7, 0x3A, 0xF8, 0xEA, 0x74, 0xCA, 0xD3, 0x87, 0xBE, 0x94, 0x3D, 0xA4, 0xD4, 0x4E, 0xC9, 0x5F, 0xF7, 0x72, 0xA7, 0x9C, 0x1C, 0x63, 0xDE, 0xF2, 0x9B, 0xBE, 0x34, 0x84, 0x27, 0x2D, 0x4B, 0xF8, 0x53, 0x09, 0x9C, 0x0E, 0xB7, 0xEE, 0xCB, 0x5B, 0x70, 0xDD, 0xB2, 0xFC, 0x3F};
const uint8_t spFIVE[] PROGMEM = {0x08, 0x68, 0x4E, 0x9D, 0x02, 0x1C, 0x60, 0xC0, 0x8C, 0x69, 0x12, 0xB0, 0xC0, 0x28, 0xAB, 0x8C, 0x9C, 0xC0, 0x2D, 0xBB, 0x38, 0x79, 0x31, 0x15, 0xA3, 0xB6, 0xE4, 0x16, 0xB7, 0xDC, 0xF5, 0x6E, 0x57, 0xDF, 0x54, 0x5B, 0x85, 0xBE, 0xD9, 0xE3, 0x5C, 0xC6, 0xD6, 0x6D, 0xB1, 0xA5, 0xBF, 0x99, 0x5B, 0x3B, 0x5A, 0x30, 0x09, 0xAF, 0x2F, 0xED, 0xEC, 0x31, 0xC4, 0x5C, 0xBE, 0xD6, 0x33, 0xDD, 0xAD, 0x88, 0x87, 0xE2, 0xD2, 0xF2, 0xF4, 0xE0, 0x16, 0x2A, 0xB2, 0xE3, 0x63, 0x1F, 0xF9, 0xF0, 0xE7, 0xFF, 0x01};
const uint8_t spSIX[] PROGMEM = {0x04, 0xF8, 0xB9, 0x55, 0x01, 0xBF, 0xA5, 0x1B, 0xE0, 0x37, 0x0F, 0x03, 0xFC, 0x96, 0x61, 0x80, 0xDF, 0x3C, 0x0C, 0xF0, 0x93, 0xDA, 0x4A, 0x87, 0x49, 0x53, 0x91, 0x37, 0x2B, 0x6D, 0xD2, 0x55, 0x23, 0xDE, 0xAC, 0xAA, 0xB9, 0x16, 0x09, 0xFF, 0xB2, 0xFA, 0x66, 0x93, 0x3C, 0x63, 0xF3, 0x9C, 0x10, 0x38, 0x45, 0xA9, 0x0A, 0xD5, 0x00, 0x00, 0x02, 0x14, 0x97, 0xAA, 0x80, 0xAB, 0x6B, 0x0D, 0xF0, 0x63, 0xA5, 0x01, 0x7E, 0xCB, 0x30, 0xC0, 0x6F, 0xE9, 0x0A, 0xF8, 0x25, 0x93, 0x01, 0x3F, 0x57, 0xFC, 0x3F};
const uint8_t spSEVEN[] PROGMEM = {0x0C, 0x78, 0xC6, 0x95, 0x01, 0x3F, 0xA5, 0x28, 0xE0, 0xB7, 0x52, 0x0B, 0x04, 0xE0, 0xB7, 0x54, 0x07, 0xFC, 0x52, 0x66, 0x80, 0x9F, 0xCB, 0x56, 0x59, 0x6C, 0x98, 0x47, 0x3E, 0x59, 0x4D, 0x89, 0x69, 0x66, 0xB9, 0x7A, 0x34, 0x39, 0x86, 0x9B, 0xD9, 0xA6, 0xD4, 0xE7, 0x10, 0xAE, 0xCA, 0xAD, 0x47, 0x97, 0x5D, 0x9A, 0xA9, 0xAE, 0x1A, 0x75, 0xB1, 0xA5, 0x66, 0xF9, 0xB2, 0xD4, 0x4D, 0x63, 0xB6, 0x84, 0x9A, 0x52, 0x76, 0x45, 0x11, 0x1A, 0xAA, 0x4B, 0x31, 0x0C, 0x79, 0x4A, 0xB0, 0x49, 0xC5, 0x50, 0xA2, 0x41, 0xA1, 0xC9, 0x65, 0xD9, 0xAB, 0x89, 0x56, 0x84, 0xFF, 0x07};
const uint8_t spEIGHT[] PROGMEM = {0xAD, 0x1B, 0xDE, 0x58, 0x23, 0x17, 0xAF, 0x6E, 0xE8, 0x20, 0xEB, 0x5C, 0xBC, 0xEA, 0x61, 0x03, 0xAD, 0x73, 0xF6, 0xAA, 0x66, 0x4A, 0xD0, 0xCC, 0xD9, 0xAB, 0x1E, 0x45, 0xC1, 0xA3, 0x66, 0xAF, 0x61, 0x36, 0x03, 0x8B, 0x5A, 0x9C, 0xA6, 0x51, 0x04, 0xA2, 0x66, 0x96, 0xBB, 0xBA, 0x47, 0xEC, 0xED, 0x8A, 0x08, 0x9C, 0xA2, 0x54, 0x85, 0x6A, 0x00, 0x80, 0x02, 0x86, 0x74, 0x63, 0xC0, 0xE6, 0x6A, 0xFF, 0x0F};
const uint8_t spNINE[] PROGMEM = {0x62, 0x75, 0xDC, 0x33, 0xB5, 0x62, 0xB9, 0x25, 0x0B, 0x8E, 0x34, 0x8F, 0xD3, 0xA6, 0xAE, 0x59, 0xD2, 0x34, 0xE9, 0x18, 0x87, 0x27, 0xC9, 0xD0, 0x78, 0xAB, 0x6F, 0xCE, 0xC2, 0x45, 0x1B, 0xAF, 0xB6, 0xF8, 0x51, 0x73, 0x9D, 0xB3, 0x9A, 0x12, 0xC7, 0x2C, 0x6D, 0xC9, 0xAA, 0x73, 0x4B, 0xF3, 0x88, 0x26, 0xAB, 0xCE, 0x2D, 0xCC, 0x23, 0xEA, 0xAC, 0x26, 0xB7, 0xD0, 0x88, 0x98, 0xB3, 0xBA, 0x5C, 0x43, 0x32, 0x7D, 0xCE, 0x1A, 0x4A, 0x0A, 0xCD, 0xF4, 0x39, 0x6B, 0xAA, 0x3E, 0x24, 0xCB, 0x67, 0xAF, 0xB5, 0xD9, 0xE4, 0x18, 0x5F, 0xB4, 0xF6, 0x6E, 0x92, 0x62, 0x7D, 0xD1, 0x38, 0xBA, 0x09, 0xF2, 0x8D, 0x59, 0xED, 0xE8, 0x3A, 0xD8, 0x27, 0x16, 0xA6, 0xBB, 0x7B, 0xF2, 0x74, 0x4F, 0x92, 0x9E, 0x1E, 0xC8, 0x4A, 0xC3, 0x49, 0x7A, 0x9A, 0x25, 0x2B, 0xF5, 0x24, 0xE9, 0xEE, 0xD1, 0x24, 0x25, 0x27, 0xBA, 0xBB, 0x25, 0x51, 0xD3, 0xAA, 0x24, 0xAE, 0x5E, 0x54, 0x55, 0x3A, 0xD4, 0xFF, 0x03};
const uint8_t spPOINT[] PROGMEM = {0x0A, 0xC8, 0x2E, 0x8C, 0x01, 0xD1, 0x85, 0x95, 0x34, 0x8B, 0xAA, 0x74, 0x56, 0xBD, 0xCA, 0xE8, 0xA6, 0xCA, 0x29, 0xCB, 0x2A, 0x92, 0xEE, 0xCA, 0xA4, 0x36, 0x2B, 0x2F, 0xAA, 0x3C, 0x43, 0x9A, 0xAC, 0xBC, 0x78, 0xF3, 0xD0, 0x68, 0xD4, 0xB2, 0x6A, 0x45, 0x4A, 0x2A, 0xA6, 0xC9, 0x93, 0xC4, 0x29, 0x09, 0xC7, 0x24, 0x8D, 0xB1, 0xD3, 0xCD, 0x08, 0x21, 0x70, 0x8A, 0x52, 0x15, 0xAA, 0x01, 0xE0, 0x80, 0x63, 0xC2, 0x14, 0x70, 0x94, 0x19, 0x01, 0xA6, 0x32, 0xFB, 0x7F};
const uint8_t spSTART[] PROGMEM = {0x02, 0xF8, 0x49, 0xCC, 0x00, 0xBF, 0x87, 0x3B, 0xE0, 0xB7, 0x60, 0x03, 0xFC, 0x9A, 0xAA, 0x80, 0x3F, 0x92, 0x11, 0x30, 0x29, 0x9A, 0x02, 0x86, 0x34, 0x5F, 0x65, 0x13, 0x69, 0xE2, 0xDA, 0x65, 0x35, 0x59, 0x8F, 0x49, 0x59, 0x97, 0xD5, 0x65, 0x7D, 0x29, 0xA5, 0xDE, 0x56, 0x97, 0xF5, 0x85, 0x8E, 0xE4, 0x5D, 0x6D, 0x0E, 0x23, 0x39, 0xDC, 0x79, 0xD4, 0xA5, 0x35, 0x75, 0x72, 0xEF, 0x51, 0x95, 0xE9, 0x38, 0xE6, 0xB9, 0x4B, 0x5D, 0x1A, 0x26, 0x6B, 0x3B, 0x46, 0xE0, 0x14, 0xA5, 0x2A, 0x54, 0x03, 0x40, 0x01, 0x43, 0xBA, 0x31, 0x60, 0x73, 0x35, 0x04, 0x4E, 0x51, 0xAA, 0x42, 0x35, 0xFE, 0x1F};
const uint8_t spREADY[] PROGMEM = {0x6A, 0xB4, 0xD9, 0x25, 0x4A, 0xE5, 0xDB, 0xD9, 0x8D, 0xB1, 0xB2, 0x45, 0x9A, 0xF6, 0xD8, 0x9F, 0xAE, 0x26, 0xD7, 0x30, 0xED, 0x72, 0xDA, 0x9E, 0xCD, 0x9C, 0x6D, 0xC9, 0x6D, 0x76, 0xED, 0xFA, 0xE1, 0x93, 0x8D, 0xAD, 0x51, 0x1F, 0xC7, 0xD8, 0x13, 0x8B, 0x5A, 0x3F, 0x99, 0x4B, 0x39, 0x7A, 0x13, 0xE2, 0xE8, 0x3B, 0xF5, 0xCA, 0x77, 0x7E, 0xC2, 0xDB, 0x2B, 0x8A, 0xC7, 0xD6, 0xFA, 0x7F,};
const uint8_t spERROR[] PROGMEM = {0x6D, 0x6C, 0x6E, 0x89, 0x5B, 0x36, 0x8F, 0xA9, 0x9B, 0x11, 0x5A, 0xE9, 0x33, 0xA7, 0x31, 0x17, 0xB7, 0x4A, 0x47, 0xFD, 0xC6, 0x92, 0x9A, 0x8B, 0x2F, 0x65, 0x4B, 0x6B, 0x1C, 0xE4, 0xD5, 0xD8, 0x2D, 0xAF, 0x65, 0x8D, 0x83, 0xAD, 0x9A, 0xB2, 0x95, 0x23, 0x76, 0x93, 0x58, 0xCA, 0xD7, 0xCE, 0xEC, 0x57, 0xF8, 0xD8, 0x5B, 0x3A, 0x8B, 0x3D, 0xC5, 0xE7, 0x7C, 0xE9, 0xCD, 0xBD, 0x30, 0x86, 0xDA, 0x86, 0x2F, 0x97, 0x82, 0x38, 0xEC, 0x13, 0xFE, 0xE4, 0x07, 0xED, 0x35, 0x4B, 0xF8, 0x73, 0x4E, 0xEC, 0xD2, 0x3C, 0xEE, 0x2F, 0xCB, 0xB9, 0x9D, 0x3B, 0xFF, 0x3F};

//Initialise libraries
Talkie voice;
HX711 scale;

void setup() {
  
  //Initialise calibration button with onboard pullup resistor
  pinMode(buttonPin, INPUT_PULLUP);

  //initalise the HX711
  scale.begin(LOADCELL_DOUT_PIN, LOADCELL_SCK_PIN);
if(EEPROM.readFloat(0)) {
cal_factor = EEPROM.readFloat(0);
scale.set_scale(cal_factor);
} else {
scale.set_scale(0);
}
        voice.say(spREADY);
}

void loop() {
  //detects when the calibration button is held
  while (digitalRead(buttonPin) == LOW ) {
    calPressed = 1;
  }
  if (calPressed == 0) {
    measurement();
  }
  else if (calPressed == 1) {
    //reset so we don't run calibration indefinitely
    calPressed = 0;
    calibration();
  }
}

void measurement() {
    //We don't want to tare if we just calibrated
    if(calibrated == 1) {
      calibrated = 0;
      scale.tare();
    }
    //Take an average of 20 readings from the HX711 for better accuracy
  reading = scale.get_units(20), 2;
  //We break the reading up to speak it properly
  //R1 is an integer, therefore we lose the decimal
  r1 = reading;
  //Work out the decimal
  r2 = reading * 10 - r1 * 10;
  //A second decimal
  r3 = reading / r1;
  //Speak the reading
  speakNum(r1);
  voice.say(spPOINT);
  speakNum(r2);
  speakNum(r3);
  //Put the HX711 in sleep mode
  scale.power_down();
  //add a second between the spoken values
  delay(1000);
  //Power up the HX711
  scale.power_up();
}

void calibration () {
  //Zero the scale
  scale.set_scale();
  scale.tare();
  voice.say(spSTART);
  //gives us time to place the weight
  delay (2000);
  //Populate our calibration factor variable
//using a 5 gram known weight
cal_factor = scale.get_units(20) / 5.00;
  scale.set_scale(cal_factor);
if(EEPROM.readFloat(0)) {
  EEPROM.updateFloat(0, cal_factor);
} else {
  EEPROM.writeFloat(0, cal_factor);
}
    delay(100);
  voice.say(spFIVE);
  calibrated = 0;
  measurement();
}

//simple function to translate the numbers 1-9 and 0 into spoken values
void speakNum(int x) {
  if (x == 1) {
    voice.say(spONE);
  } else if (x == 2) {
    voice.say(spTWO);
  } else if (x == 3) {
    voice.say(spTHREE);
  } else if (x == 4) {
    voice.say(spFOUR);
  } else if (x == 5) {
    voice.say (spFIVE);
  } else if (x == 6) {
    voice.say(spSIX);
  } else if (x == 7) {
    voice.say(spSEVEN);
  } else if (x == 8) {
    voice.say(spEIGHT);
  } else if (x == 9) {
    voice.say(spNINE);
  } else if (x == 0) {
    voice.say(spZERO);
  } else {
    voice.say(spERROR);
  }
}
